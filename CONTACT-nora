package edu.project3;

import java.time.LocalDateTime;
import java.util.ArrayList;

public class Contact {
	
	/**
	 * stores the name, number, email, notes, incoming/outgoing calls for each contact
	 */
	
	private String name = "N/A";
	private String number = "";
	private String email = "";
	private String notes = "";
	private int outgoingCounter = 0;
	private int incomingCounter = 0;
	private ArrayList <String> timeStamps = new ArrayList<String>();
	
	public Contact() {
		
	}
	
	/**
	 * creates a new contact with the given name, number, email, notes
	 * if a call is made or received, outgoingCounter/incomingCounter will be set to 1
	 * @param name 
	 * @param number 
	 * @param email 
	 * @param notes 
	 * @param outgoingCounter 
	 * @param incomingCounter 
	 */
	public Contact(String name, String number, String email, String notes, int outgoingCounter, int incomingCounter) {
		this.name = name;
		this.number = number;
		this.email = email;
		this.notes = notes;
		if (outgoingCounter != 0) {
			this.outgoingCounter = outgoingCounter;
			this.setTimeStamp();
		}
		if (incomingCounter != 0) {
			this.incomingCounter = incomingCounter;
			this.setTimeStamp();
		}
	}
	
	/**
	 * returns the contact name
	 * @return
	 */
	public String getName() {
		return this.name;
	}
	
	/**
	 * edits the name
	 * @param name
	 */
	public void editName(String name) {
	
		this.name = name;
	}

	/**
	 * returns the contact number
	 * @return
	 */
	public String getNum() {
		return this.number;
	}
	
	/**
	 * edits the number
	 * @param
	 */
	public void editNumber(String number) {
		this.number = number;
	}
	
	/**
	 * formats the number into (XXX) - XXX - XXXX or XXX - XXXX 
	 * @return
	 */
	public String formatNum() {
		String str = "";
		if (number.length() == 10) {
			str = "(" + number.substring(0, 2) + ") " + number.substring(3, 5) + "-" + number.substring(6,9);
		}
		else if (number.length() == 7) {
			str = number.substring(0, 2) + "-" + number.substring(3,6);
		}
		
		return str;
	}
	
	/**
	 * edits the email
	 * @param email
	 */
	public void editEmail(String email) {
		this.email = email;
	}
	
	
	/**
	 * edits the notes
	 * @param notes
	 */
	public void editNotes(String notes) {
		this.notes = notes;
	}
	
	/**
	 * when the user makes an outgoing call, outgoing counter is updated
	 */
	public void makeCall() {
		outgoingCounter++;
	}
	
	/**
	 * when the user makes an outgoing call, incoming counter is updated
	 */
	public void receiveCall() {
		incomingCounter++;
	}
	
	/**
	 * returns the total number of calls
	 * @return
	 */
	public int getTotalCalls() {
		return outgoingCounter + incomingCounter;
	}
	
	/**
	 * sets the time stamp for each call, and adds to the array list of all the time stamps for that call
	 */
	public void setTimeStamp() {
		
		String now = LocalDateTime.now().toString();
		String year = now.substring(0,4);
		String month = now.substring(5,7);
		String day = now.substring(8, 10);
		String minute = now.substring(14,16);
		String hour_24 = now.substring(11,13);
		String hour_12;
		String timeFormat;
		
		if (Integer.parseInt(hour_24) > 12) {
			hour_12 = Integer.toString(Integer.parseInt(hour_24) - 12);
			timeFormat = hour_12 + ":" + minute + " PM";

			}
		else {
			hour_12 = Integer.toString(Integer.parseInt(hour_24) + 12);
			timeFormat = hour_12 + ":" + minute + " AM";
			}
		
		String timeStamp = month + "/" + day + "/" + year + "\t " + timeFormat;
		
		timeStamps.add(timeStamp);
	}
	
	/**
	 * formats a call for the call log
	 * @return
	 */
	public String formatCall() {
		
		String str = "";
		if (incomingCounter > 0) { 
			str = formatNum() + " (" + incomingCounter + ")\n" + timeStamps.get(timeStamps.size() - 1) + "\t(Incoming)";
		} else if (outgoingCounter > 0 && name.equals("N/A")) {
			str = formatNum() + " ("+ outgoingCounter + ")\n" + timeStamps.get(timeStamps.size() - 1) + "\t(Outgoing)";
			
		}else if (outgoingCounter > 0 && !(name.equals("N/A"))){
			str = name + " (" + outgoingCounter + ")\n" + timeStamps.get(timeStamps.size() - 1) + "\t(Outgoing)"; 
		}else {
			str = name + "\n" + timeStamps.get(timeStamps.size() -1) + "\t(Outgoing)"; 
		}
		
		return str;
	}
	
	/**
	 * formats a detailed call for the call log
	 * @return
	 */
	public String formatDetailedCall() {
		String str = "";
		if (incomingCounter > 0) { 
			str += formatNum();
		} else if (outgoingCounter > 0 && name.equals("N/A")) {
			str += formatNum();
			
		}else if (outgoingCounter > 0 && !(name.equals("N/A"))){
			str += name;
		}

		
		for( String time : timeStamps) {
			if (incomingCounter >= 1) { 
				str += "\n" + time + "\t(Incoming)";
			} else if (outgoingCounter > 1 && name.equals("N/A")) {
				str += "\n" + time + "\t(Outgoing)";
				
			}else if (outgoingCounter > 1 && !(name.equals("N/A"))){
				str += "\n" + time + "\t(Outgoing)"; 
			}
		}
		return str;
	}
	
	/**
	 * formats toString for printing the contact information
	 * @return
	 */
	public String toString() {
		String str = this.name + "\t" + formatNum() + "\t" + this.email + "\t" + this.notes;
		return str;
	}
	
}
